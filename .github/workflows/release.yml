name: Release Plugins

on:
  push:
    tags:
      - '*'

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract plugin info
        id: plugin
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          # Extract version (everything after the last hyphen)
          VERSION="${TAG##*-}"
          # Extract plugin name (everything before the last hyphen)
          PLUGIN_NAME="${TAG%-*}"
          echo "name=$PLUGIN_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Verify plugin exists
        run: |
          if [ ! -d "plugins/${{ steps.plugin.outputs.name }}" ]; then
            echo "Error: Plugin directory plugins/${{ steps.plugin.outputs.name }} not found"
            exit 1
          fi
          if [ ! -f "plugins/${{ steps.plugin.outputs.name }}/plugin.yaml" ]; then
            echo "Error: plugin.yaml not found in plugins/${{ steps.plugin.outputs.name }}"
            exit 1
          fi

      - name: Set up ORAS
        uses: oras-project/setup-oras@v1

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Helm 4 nightly
        run: |
          curl -fsSL https://get.helm.sh/helm-canary-linux-amd64.tar.gz | tar -xz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm version

      - name: Build and package plugin
        run: |
          makefile=plugins/${{ steps.plugin.outputs.name }}/Makefile
          if [ -f "$makefile" ]; then
            make -C $makefile build
          fi

          if [ "${{ vars.SIGN }}" = "false" ] || [ "${{ steps.plugin.outputs.name }}" = "example-unsigned" ]; then
            helm plugin package --sign=false plugins/${{ steps.plugin.outputs.name }}
          else
            base64 -d <<< "${{ secrets.GPG_KEYRING_BASE64 }}" > secring.gpg
            echo "${{ secrets.GPG_PASSPHRASE }}" > passphrase.txt
            helm plugin package --sign --key '${{ vars.SIGNING_KEY_EMAIL }}' --keyring secring.gpg --passphrase-file passphrase.txt plugins/${{ steps.plugin.outputs.name }}
            rm -f passphrase.txt

            if [ "${{ steps.plugin.outputs.name }}" = "example-mismatched-provenance" ]; then
              # Corrupt the provenance file to create mismatched signature
              sed -i 's/sha256:[a-f0-9]\{64\}/sha256:d6816fb42ef3232522def574ac096e810e87ff8bc398213f3376efb3d3d098f5/' $PACKAGE.prov
            fi
          fi
        env:
          PACKAGE: "${{ steps.plugin.outputs.name }}-${{ steps.plugin.outputs.version }}.tgz"

      - name: Push to OCI registry
        run: |
          if [ -f "$PACKAGE.prov" ]; then
            oras push $NAME \
              --artifact-type application/vnd.helm.plugin.v1+json \
              $PACKAGE \
              $PACKAGE.prov
          else
            oras push $NAME \
              --artifact-type application/vnd.helm.plugin.v1+json \
              $PACKAGE
          fi
        env:
          PACKAGE: "${{ steps.plugin.outputs.name }}-${{ steps.plugin.outputs.version }}.tgz"
          NAME: "${{ env.REGISTRY }}/${{ github.repository }}/${{ steps.plugin.outputs.name }}:${{ steps.plugin.outputs.version }}"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.FG_PAT }}
          files: |
            ${{ steps.plugin.outputs.name }}-${{ steps.plugin.outputs.version }}.tgz
            ${{ steps.plugin.outputs.name }}-${{ steps.plugin.outputs.version }}.tgz.prov
